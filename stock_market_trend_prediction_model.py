# -*- coding: utf-8 -*-
"""Stock_Market_Trend_Prediction_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JzLrli5jTlNMJdx6bIjuVKaEmj8B3vID

# **Stock Market Trend Prediction Model By Mirza Yasir Abdullah Baig**



## **Step Number 1: Import all Dependencies**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas_datareader as data

plt.style.use('fivethirtyeight')
# %matplotlib inline

"""## **Step Number 3: Load the Data**"""

import yfinance as yf
import datetime as dt

stock = "POWERGRID.NS"
start = dt.datetime(2000, 1, 1)
end = dt.datetime(2024, 11, 1)

df = yf.download(stock, start, end)

df.head()

df.shape

df.info()

df.isnull().sum()

df.describe()

df = df.reset_index()

df.columns

df.to_csv("powergrid.csv")

data01 = pd.read_csv("powergrid.csv")

data01.head()

"""## **Step Number 4: Visualization of Data**"""

# Candlesticks
import plotly.graph_objects as go

fig = go.Figure(data=[go.Candlestick(x = data01['Date'], open = data01['Open'],
                                    high = data01['High'],
                                    low = data01['Low'],
                                    close = data01['Close'])])
fig.update_layout(xaxis_rangeslider_visible=False)
fig.show()

df = df.drop(['Date', 'Adj Close'], axis = 1)

df.head()

plt.figure(figsize=(12, 6))
plt.plot(df['Close'], label = f'{stock} Closing Price', linewidth = 1)
plt.title(f'{stock} Closing prices over time')
plt.legend()
plt.show()

plt.figure(figsize=(12, 6))
plt.plot(df['Open'], label = f'{stock} Opening Price', linewidth = 1)
plt.title(f'{stock} Opening prices over time')
plt.legend()
plt.show()

plt.figure(figsize=(12, 6))
plt.plot(df['High'], label = f'{stock} High Price', linewidth = 1)
plt.title(f'{stock} High prices over time')
plt.legend()
plt.show()

plt.figure(figsize=(12, 6))
plt.plot(df['Volume'], label = f'{stock} Volume', linewidth = 2)
plt.title(f'{stock} Volume over time')
plt.legend()
plt.show()

"""## **Step Number 5: preprocessing Data**"""

# Moving Average
# [10, 20, 30, 40, 50, 60, 70, 80, 90]
# moving average for last 5 days -> null null null null 30.0 40.0 50.0

temp_data = [10, 20, 30, 40, 50, 60, 70, 80, 90]
print(sum(temp_data[2:7])/5)

import pandas as pd
df01 = pd.DataFrame(temp_data)

df01.rolling(5).mean()

ma100 = df.Close.rolling(100).mean()

ma100

ma200 = df.Close.rolling(200).mean()

plt.figure(figsize=(12, 6))
plt.plot(df.Close, label = f'{stock} Close Price', linewidth = 1)
plt.plot(ma100, label = f'{stock} Moving Average 100 Price', linewidth = 1)
plt.plot(ma200, label = f'{stock} Moving Average 200 Price', linewidth = 1)
plt.legend()
plt.show()

ema100 = df.Close.ewm(span=100, adjust = False).mean()

ema200 = df['Close'].ewm(span=200, adjust = False).mean()

plt.figure(figsize=(12, 6))
plt.plot(df.Close, label = f'{stock} Close Price', linewidth = 1)
plt.plot(ema100, label = f'{stock} Exp. Moving Average 100 Price', linewidth = 1)
plt.plot(ema200, label = f'{stock} Exp. Moving Average 200 Price', linewidth = 1)
plt.legend()
plt.show()

"""## **Step Number 6: Training And Testing**"""

# Training & Testing

data_training = pd.DataFrame(df['Close'][0:int(len(df)*0.70)])
data_testing = pd.DataFrame(df['Close'][int(len(df)*0.70): int(len(df))])

data_training.shape

data_testing.shape

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range = (0, 1))

data_training_array = scaler.fit_transform(data_training)

data_training_array

data_training_array.shape[0]

x_train = []
y_train = []

for i in range(100, data_training_array.shape[0]):
    x_train.append(data_training_array[i-100:i])
    y_train.append(data_training_array[i, 0])

x_train, y_train  = np.array(x_train), np.array(y_train)

x_train.shape

"""## **Step Number 7: Building The Model**"""

# Model Building
from keras.layers import Dense, Dropout, LSTM
from keras.models import Sequential

model = Sequential()

model.add(LSTM(units = 50, activation = 'relu', return_sequences = True, input_shape = (x_train.shape[1],1)))
model.add(Dropout(0.2))

model.add(LSTM(units = 60, activation = 'relu', return_sequences = True))
model.add(Dropout(0.3))

model.add(LSTM(units = 80, activation = 'relu', return_sequences = True))
model.add(Dropout(0.4))

model.add(LSTM(units = 120, activation = 'relu'))
model.add(Dropout(0.5))

model.add(Dense(units = 1))

model.summary()

model.compile(optimizer = 'adam', loss = 'mean_squared_error')
model.fit(x_train, y_train, epochs = 10)

past_100_days = data_training.tail(100)

final_df = pd.concat([past_100_days, data_testing], ignore_index=True)

final_df.head()

input_data = scaler.fit_transform(final_df)

import numpy as np

x_test = np.array(x_test)   # Convert list â†’ numpy
print(x_test.shape)         # Correct way

"""## **Step Number 8: Testing Model**"""

time_step = 100  # number of days in each sequence
x_test, y_test = [], []

# create sequences from input_data
for i in range(time_step, input_data.shape[0]):
    x_test.append(input_data[i-time_step:i])
    y_test.append(input_data[i, 0])  # assuming 1 feature (price)

x_test, y_test = np.array(x_test), np.array(y_test)

# reshape for LSTM (samples, timesteps, features)
x_test = x_test.reshape(x_test.shape[0], x_test.shape[1], 1)

print("x_test shape:", x_test.shape)
print("y_test shape:", y_test.shape)

# make sure x_test is ready (3D for LSTM)
print("x_test shape:", x_test.shape)

# run prediction
y_predicted = model.predict(x_test)

# check shape
print("y_predicted shape:", y_predicted.shape)

scaler.scale_

print("x_test shape:", x_test.shape)   # should be (samples, timesteps, features)

y_predicted = model.predict(x_test)
print("y_predicted shape:", y_predicted.shape)

y_predicted = scaler.inverse_transform(y_predicted)
y_test = scaler.inverse_transform(y_test.reshape(-1, 1))

plt.figure(figsize=(12, 6))
plt.plot(y_test, label = 'Original Price', linewidth = 1)
plt.plot(y_predicted, label = 'Predicted Price', linewidth = 1)
plt.legend()
plt.show()

"""## **Step Number 9: Saving The Model**"""

model.save('stock_dl_model.h5')